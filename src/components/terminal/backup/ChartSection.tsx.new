import React, { useEffect, useRef, useState } from 'react';
import { PriceOverview } from './PriceOverview';
import { TimeframeSelector } from './TimeframeSelector';
import { TradingPairSelector, TradingPair } from './TradingPairSelector';
import { useSelectedAccount } from '@/hooks/useSelectedAccount';

// Define an interface for the TradingView widget options
interface TradingViewWidgetOptions {
  autosize?: boolean;
  symbol: string;
  interval: string;
  timezone?: string;
  theme?: string;
  style?: string;
  locale?: string;
  enable_publishing?: boolean;
  allow_symbol_change?: boolean;
  container_id: string;
  hide_side_toolbar?: boolean;
}

// Extend the window interface to include TradingView
declare global {
  interface Window {
    TradingView: {
      widget: new (options: TradingViewWidgetOptions) => unknown;
    };
  }
}

interface ChartSectionProps {
  selectedPair?: TradingPair;
  onPairSelect?: (pair: TradingPair) => void;
}

export function ChartSection({
  selectedPair,
  onPairSelect,
}: ChartSectionProps = {}) {
  const container = useRef<HTMLDivElement>(null);
  const [currentTimeframe, setCurrentTimeframe] = useState<string>('D');
  const { selectedAccount } = useSelectedAccount();

  // Use the provided selectedPair or a default
  const [currentPair, setCurrentPair] = useState<TradingPair>(
    selectedPair || {
      symbol: 'BTC/USDT',
      baseAsset: 'BTC',
      quoteAsset: 'USDT',
      price: '84,316.58',
      change24h: '+0.92%',
      volume24h: '1.62b',
      isFavorite: true,
    },
  );
  const widgetInstanceRef = useRef<unknown | null>(null);

  // Update current pair when selectedPair changes
  useEffect(() => {
    if (selectedPair) {
      setCurrentPair(selectedPair);
    }
  }, [selectedPair]);

  // Initialize and update the TradingView widget
  useEffect(() => {
    // Create a unique ID for the container
    const containerId = 'tradingview-widget-container-div';
    const currentContainer = container.current;

    if (!currentContainer) return;

    // Ensure the container has the correct ID
    currentContainer.id = containerId;

    // Load TradingView script if not already loaded
    if (!window.TradingView) {
      const script = document.createElement('script');
      script.src = 'https://s3.tradingview.com/tv.js';
      script.async = true;
      script.onload = createWidget;
      document.head.appendChild(script);
    } else {
      createWidget();
    }

    // Function to create the widget
    function createWidget() {
      if (
        typeof window.TradingView !== 'undefined' &&
        window.TradingView.widget
      ) {
        // Clear previous widget before creating a new one
        currentContainer.innerHTML = '';
        widgetInstanceRef.current = new window.TradingView.widget({
          autosize: true,
          symbol: `${selectedAccount?.exchange?.toUpperCase() || 'BINANCE'}:${currentPair.baseAsset}${currentPair.quoteAsset}`,
          interval: currentTimeframe,
          timezone: 'Etc/UTC',
          theme: 'dark',
          style: '1',
          locale: 'en',
          enable_publishing: false,
          allow_symbol_change: true,
          container_id: currentContainer.id,
          hide_side_toolbar: false,
        });
      }
    }

    // Cleanup function
    return () => {
      // No specific cleanup needed for TradingView widget
    };
  }, [currentPair, currentTimeframe, selectedAccount]);

  // Handle timeframe selection
  const handleTimeframeSelect = (timeframe: string) => {
    setCurrentTimeframe(timeframe);
  };

  // Handle pair selection
  const handlePairSelect = (pair: TradingPair) => {
    setCurrentPair(pair);
    if (onPairSelect) {
      onPairSelect(pair);
    }
  };

  return (
    <div className="flex flex-col h-full">
      <div className="flex items-center justify-between px-4 py-2 border-b border-gray-800">
        <TradingPairSelector onPairSelect={handlePairSelect} />
        <PriceOverview selectedPair={currentPair} />
      </div>

      {/* TradingView Widget Container */}
      <div
        id="tradingview-widget-container-div"
        ref={container}
        className="flex-grow"
      >
        {/* The TradingView widget will be rendered here */}
      </div>

      {/* Pass state and handler to TimeframeSelector */}
      <TimeframeSelector
        currentTimeframe={currentTimeframe}
        onTimeframeSelect={handleTimeframeSelect}
      />
    </div>
  );
}


// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Make sure DATABASE_URL is set in your .env file
}

// --- User Model ---
model User {
  user_id        String    @id @default(uuid()) @db.Uuid
  email          String    @unique @db.VarChar(255)
  password_hash  String    @db.VarChar(255)
  first_name     String?   @db.VarChar(255)
  last_name      String?   @db.VarChar(255)
  created_at     DateTime  @default(now()) @db.Timestamptz()
  updated_at     DateTime  @updatedAt @db.Timestamptz()
  last_login_at  DateTime? @db.Timestamptz()
  is_active      Boolean   @default(true)
  email_verified Boolean   @default(false)

  apiKeys UserApiKey[] // Relation to UserApiKey model

  @@map("users") // Maps to the 'users' table
}

// --- Exchange Model ---
model Exchange {
  exchange_id   String @id @db.VarChar(50)
  exchange_name String @unique @db.VarChar(100)
  api_base_url  String? @db.VarChar(255)
  ws_base_url   String? @db.VarChar(255)
  is_active     Boolean @default(true)

  userApiKeys UserApiKey[] // Relation to UserApiKey model

  @@map("exchanges") // Maps to the 'exchanges' table
}

// --- User API Key Model ---
model UserApiKey {
  api_key_id           String    @id @default(uuid()) @db.Uuid
  user_id              String    @db.Uuid
  exchange_id          String    @db.VarChar(50)
  api_key_encrypted    String    @db.Text // Store encrypted key
  api_secret_encrypted String    @db.Text // Store encrypted secret
  key_nickname         String?   @db.VarChar(100)
  permissions          Json?     @db.JsonB // Store permissions if available
  created_at           DateTime  @default(now()) @db.Timestamptz()
  updated_at           DateTime  @updatedAt @db.Timestamptz()
  is_valid             Boolean?  // Flag indicating if the key is currently valid

  user     User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade) // Relation to User model
  exchange Exchange @relation(fields: [exchange_id], references: [exchange_id], onDelete: Restrict) // Relation to Exchange model

  @@unique([user_id, exchange_id, key_nickname]) // Unique constraint
  @@index([user_id]) // Index for user lookups
  @@index([user_id, exchange_id]) // Index for user/exchange lookups
  @@map("user_api_keys") // Maps to the 'user_api_keys' table
}

// --- Placeholder Models (Future Implementation) ---
// model TradingBot {
//   bot_id      String   @id @default(uuid())
//   user_id     String   @db.Uuid
//   strategy_id String
//   config      Json
//   status      String   // e.g., 'active', 'inactive', 'error'
//   created_at  DateTime @default(now())
//
//   user        User     @relation(fields: [user_id], references: [user_id])
//   // strategy Strategy @relation(fields: [strategy_id], references: [strategy_id])
//   instances   BotInstance[]
//
//   @@map("trading_bots")
// }

// model BotInstance {
//   instance_id String   @id @default(uuid())
//   bot_id      String
//   exchange_id String   @db.VarChar(50)
//   api_key_id  String   @db.Uuid
//   status      String   // e.g., 'running', 'stopped', 'error'
//   started_at  DateTime @default(now())
//
//   bot         TradingBot @relation(fields: [bot_id], references: [bot_id])
//   exchange    Exchange   @relation(fields: [exchange_id], references: [exchange_id])
//   apiKey      UserApiKey @relation(fields: [api_key_id], references: [api_key_id])
//
//   @@map("bot_instances")
// }

// model Strategy {
//   strategy_id String @id @default(uuid())
//   name        String @unique
//   description String?
//   parameters  Json?  // Default parameters for the strategy
//
//   // bots TradingBot[]
//
//   @@map("strategies")
// }

// model Order {
//   order_id        String   @id @default(uuid())
//   user_id         String   @db.Uuid
//   exchange_id     String   @db.VarChar(50)
//   api_key_id      String   @db.Uuid
//   symbol          String
//   type            String   // e.g., 'limit', 'market'
//   side            String   // e.g., 'buy', 'sell'
//   amount          Float    // Consider using Decimal type if precision is critical
//   price           Float?   // Nullable for market orders
//   status          String   // e.g., 'open', 'filled', 'canceled', 'rejected'
//   created_at      DateTime @default(now())
//   updated_at      DateTime @updatedAt
//   exchange_order_id String? @unique // The ID assigned by the exchange
//
//   user            User     @relation(fields: [user_id], references: [user_id])
//   exchange        Exchange @relation(fields: [exchange_id], references: [exchange_id])
//   apiKey          UserApiKey @relation(fields: [api_key_id], references: [api_key_id])
//
//   @@map("orders")
// }

// model UserSetting {
//   setting_id    String @id @default(uuid())
//   user_id       String @db.Uuid
//   setting_key   String @db.VarChar(100)
//   setting_value Json
//
//   user          User   @relation(fields: [user_id], references: [user_id])
//
//   @@unique([user_id, setting_key])
//   @@map("user_settings")
// }
